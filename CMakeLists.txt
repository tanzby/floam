cmake_minimum_required(VERSION 2.8.3)
project(floam)

#set(CMAKE_BUILD_TYPE "Release")
set(CMAKE_CXX_FLAGS "-std=c++17")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -Wall -g")

find_package(catkin REQUIRED COMPONENTS
  geometry_msgs
  nav_msgs
  sensor_msgs
  roscpp
  rospy
  rosbag
  std_msgs
  tf
  eigen_conversions
)

find_package(Eigen3)
if(NOT EIGEN3_FOUND)
  # Fallback to cmake_modules
  find_package(cmake_modules REQUIRED)
  find_package(Eigen REQUIRED)
  set(EIGEN3_INCLUDE_DIRS ${EIGEN_INCLUDE_DIRS})
  set(EIGEN3_LIBRARIES ${EIGEN_LIBRARIES})  # Not strictly necessary as Eigen is head only
  # Possibly map additional variables to the EIGEN3_ prefix.
else()
  set(EIGEN3_INCLUDE_DIRS ${EIGEN3_INCLUDE_DIR})
endif()
find_package(PCL REQUIRED)
find_package(GTSAM REQUIRED)

include_directories(
  include
  ${catkin_INCLUDE_DIRS} 
  ${PCL_INCLUDE_DIRS}
  ${EIGEN3_INCLUDE_DIRS}
  ${GTSAM_INCLUDE_DIRS}
)

catkin_package(
  CATKIN_DEPENDS geometry_msgs nav_msgs roscpp rospy std_msgs
  DEPENDS EIGEN3 PCL GTSAM
  INCLUDE_DIRS include
)

add_library(${PROJECT_NAME}
  src/laserMappingClass.cpp
  src/odomEstimationClass.cpp
  src/laserProcessingClass.cpp
  src/lidar.cpp
)

target_link_libraries(${PROJECT_NAME}
  ${catkin_LIBRARIES}
  ${PCL_LIBRARIES}
  gtsam
)

add_executable(floam_laser_processing_node src/laserProcessingNode.cpp)
target_link_libraries(floam_laser_processing_node ${PROJECT_NAME})

add_executable(floam_odom_estimation_node src/odomEstimationNode.cpp)
target_link_libraries(floam_odom_estimation_node  ${PROJECT_NAME})

add_executable(floam_laser_mapping_node src/laserMappingNode.cpp)
target_link_libraries(floam_laser_mapping_node  ${PROJECT_NAME})

add_subdirectory(test)
